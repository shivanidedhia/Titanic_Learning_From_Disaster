}
print(paste0("Net Profit is $", round(simulations_profit,2), "which is average + $2 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
print(paste0("Net Profit is $", round(simulations_profit,2), "which is average + $2.26 in every iteration"))
dice <- function (m) {
rolling_three_dice <-  matrix(sample(1:6, 3*m, replace = TRUE), nrow = 3, ncol = m)
sum_of_dice <-  colSums(rolling_three_dice)
mean(sum_of_dice == 9)
}
dice(100000)
dice <- function (m) {
rolling_three_dice <-  matrix(sample(1:6, 3*m, replace = TRUE), nrow = 3, ncol = m)
sum_of_dice <-  colSums(rolling_three_dice)
mean(sum_of_dice == 9)
mean(sum_of_dice == 10)
}
dice(100000)
dice <- function (m) {
rolling_three_dice <-  matrix(sample(1:6, 3*m, replace = TRUE), nrow = 3, ncol = m)
sum_of_dice <-  colSums(rolling_three_dice)
print(mean(sum_of_dice == 9))
print(mean(sum_of_dice == 10))
}
dice(100000)
stock_price <- function(n = 30, v0 = 100)
{ log_returns <- rnorm(n = n - 1, mean = 0, sd = 0.1)
log_price <- cumsum(c(log(v0), log_returns))
price <- exp(log_price)
return(price)
}
stock_120_atleast_once <- 0
for (m in  1:10000) {
if (max(stock_price()) >= 120) {
stock_120_atleast_once <- stock_120_atleast_once + 1
}
}
stock_120_atleast_once / 10000
win_racquetball <- function() {
i_serve <- TRUE
my_points <- 0
opponent_points <- 0
while (my_points<21 && opponent_points<21) {
if (i_serve==TRUE) {
winner <- sample(c("i_score", "opponent_scores"), 1, prob = c(0.6, 0.4))
if (winner == "i_score") {
my_points = my_points + 1
i_serve <- TRUE
} else {
i_serve <- FALSE
}
}else {
winner <- sample(c("i_score", "opponent_scores"), 1, prob = c(0.5, 0.5))
if(winner == "opponent_scores") {
opponent_points = opponent_points + 1
i_serve <- FALSE
}
else {
i_serve <- TRUE
}
}
}
return(my_points==21)
}
win_racquetball()
n_win <- 0; n <- 10000;
for (i in 1:n) {if (win_racquetball()) n_win <- n_win + 1}
n_win / n
stock_price <- function(n = 30, v0 = 100)
{ log_returns <- rnorm(n = n - 1, mean = 0, sd = 0.1)
log_price <- cumsum(c(log(v0), log_returns))
price <- exp(log_price)
return(price)
}
# a) Estimate the probability that, at the end of 30 days, the stock price is $120 or higher.
stock_ended_120 <- 0
for (m in 1:10000) {
stock <- stock_price()
if(stock[30] >= 120) {
stock_ended_120 <- stock_ended_120 + 1
}
}
(stock_ended_120/ (10000)) ## ~.36 probablity that at the end of 30 days, the stock will be $120 or higher
stock_ended_120_atleast_once <- 0
for(m in 1:10000){
stock <- stock_price()
for (i in 1:30) {
if (stock[i] >= 120){
stock_ended_120_atleast_once <- stock_ended_120_atleast_once + 1
}
}
}
(probablity <- stock_ended_120_atleast_once/(10000*30)) ## ~.27 probability that stock price will close at 120 or higher atleast once
#### 3b ########## used the max function and got ~ .64 probability that stock price will close at 120 or higher
stock_120_atleast_once <- 0
for (m in  1:10000) {
if (max(stock_price()) >= 120) {
stock_120_atleast_once <- stock_120_atleast_once + 1
}
}
stock_120_atleast_once / 10000
stock_profit<-0
i<-0
for(m in 1:10000)
{
stock<-stock_price()
for(j in 1:30)
{
if(stock[j]>=120)
{
date<-j
break
}
else if (stock[j]<=90)
{
date<-j
break
}
else if(j==30)
{
date<-30
}
}
if(stock[date]>100)
{
stock_profit<-stock_profit+1
}
}
stock_profit/10000
stock_loss<-0
i<-0
for(m in 1:10000)
{
stock<-stock_price()
for(j in 1:30)
{
if(stock[j]>=120)
{
date<-j
break
}
else if (stock[j]<=90)
{
date<-j
break
}
else if(j==30)
{
date<-30
}
}
if(stock[date]<100)
{
stock_loss<-stock_loss+1
}
}
stock_loss/10000
stock_end30<-0
i<-0
for(m in 1:10000)
{
stock<-stock_price()
for(j in 1:30)
{
if(stock[j]>=120)
{
date<-j
break
}
else if (stock[j]<=90)
{
date<-j
break
}
else if(j==30)
{
date<-30
stock_end30<-stock_end30+1
}
}
}
stock_end30/10000
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
print(paste0("Net Profit is $", round(simulations_profit,2), " which is average + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
# mean net profit
simulations_profit/10000
# mean net profit
simulations_profit/10000
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
setwd("~/Documents/Github/Titanic_Learning_From_Disaster/Titanic_Data")
library(ggplot2)
library(stringr)
# Load raw data
train <- read.csv("train.csv",header = TRUE)
test <- read.csv("test.csv",header = TRUE)
# Adding "survived variable" to the test data
test.survived <- data.frame(survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# Structure of the dataset
str(data.combined)
# p class is the class of ticket for a passagener which is not a int.
# 1 is First Class, 2 is Second Class and 3 is Third
data.combined$pclass <- as.factor(data.combined$pclass)
# 1 means survived and 0 means didn't survive
data.combined$survived <- as.factor(data.combined$survived)
# How many people survived?
table(data.combined$survived) # 549 passed away and 342 survived
# What was the distribution across classes?
table(data.combined$pclass) # More people are in third class.
# How many people survived by class ?
train$pclass <- as.factor(train$pclass)
ggplot(train, aes(x = pclass, fill = factor(survived))) +
geom_bar() +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
# People in 1st class survived more than people in the 3rd class.
# Possibly since the 1st class passengers are closer to the lifeboats.
# 'names' is not a factor so converted it to character
head(as.character(train$name))
# How many unique names are there across both train & test?
length(unique(as.character(data.combined$name)))
## two duplicate names
# How many unique names are there across both train & test?
length(unique(as.character(data.combined$name)))
# First, get the duplicate names and store them as a vector
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$name))), "name"])
# Next, take a look at the records in the combined data set
data.combined[which(data.combined$name %in% dup.names),]
# None of the names are duplicated as they are different people
# Pattern with Misses
misses <- data.combined[which(str_detect(data.combined$name, "Miss.")),]
misses[1:5,]
# Pattern with Mrses
mrses <- data.combined[which(str_detect(data.combined$name, "Mrs.")), ]
mrses[1:5,]
# Pattern with Males
males <- data.combined[which(data.combined$sex == "male"), ]
males[1:5,]
# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the
# data set and then explore a potential 3-dimensional relationship.
# Create a utility function to help with title extraction
# NOTE - Using the grep function here, but could have used the str_detect function as well.
extractTitle <- function(name) {
name <- as.character(name)
if (length(grep("Miss.", name)) > 0) {
return ("Miss.")
} else if (length(grep("Master.", name)) > 0) {
return ("Master.")
} else if (length(grep("Mrs.", name)) > 0) {
return ("Mrs.")
} else if (length(grep("Mr.", name)) > 0) {
return ("Mr.")
} else {
return ("Other")
}
}
# NOTE - The code below uses a for loop which is not a very R way of
#        doing things
titles <- NULL
for (i in 1:nrow(data.combined)) {
titles <- c(titles, extractTitle(data.combined[i,"name"]))
}
data.combined$title <- as.factor(titles)
# Since we only have survived lables for the train set, only use the
# first 891 rows
ggplot(data.combined[1:891,], aes(x = title, fill = survived)) +
geom_bar() +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Title") +
ylab("Total Count") +
labs(fill = "Survived")
table(data.combined$sex)
# Visualize the 3-way relationship of sex, pclass, and survival, compare to analysis of title
ggplot(data.combined[1:891,], aes(x = sex, fill = survived)) +
geom_bar() +
facet_wrap(~pclass) +
ggtitle("Pclass") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
summary(data.combined$age)
summary(data.combined[1:891,"age"])
View(data.combined)
ggplot(data.combined[1:891,], aes(x = age, fill = survived)) +
facet_wrap(~sex + pclass) +
geom_histogram(binwidth = 10) +
xlab("Age") +
ylab("Total Count") +
ggtitle("Survival by Class and Gender")
boys <- data.combined[which(data.combined$title == "Master."),]
summary(boys$age)
# Check for NA's to use as proxy for the missing values in age
boys <- data.combined[which(data.combined$title == "Master."),]
summary(boys$age)
misses <- data.combined[which(data.combined$title == "Miss."),]
summary(misses$age)
ggplot(misses[misses$survived != "None",], aes(x = age, fill = survived)) +
facet_wrap(~pclass) +
geom_histogram(binwidth = 5) +
ggtitle("Age for 'Miss.' by Pclass") +
xlab("Age") +
ylab("Total Count")
misses.alone <- misses[which(misses$sibsp == 0 & misses$parch == 0),]
summary(misses.alone$age)
length(which(misses.alone$age <= 14.5))
summary(data.combined$sibsp)
length(unique(data.combined$sibsp))
data.combined$sibsp <- as.factor(data.combined$sibsp)
